#ifndef MUGASTMAP
#define MUGASTMAP

#include "MugastReverseMap.h"

namespace MUGAST_MAP{

  const int TrapezeX[128] ={
    55,
    50,
    57,
    52,
    61,
    54,
    59,
    56,
    53,
    58,
    51,
    60,
    49,
    62,
    63,
    48,
    45,
    46,
    43,
    44,
    41,
    42,
    39,
    40,
    37,
    38,
    35,
    36,
    33,
    34,
    64,
    47,
    31,
    32,
    29,
    30,
    27,
    28,
    25,
    26,
    23,
    24,
    21,
    22,
    19,
    20,
    17,
    18,
    10,
    15,
    8,
    13,
    6,
    11,
    4,
    9,
    2,
    7,
    12,
    5,
    14,
    3,
    16,
    1,
    125,
    126,
    123,
    124,
    121,
    122,
    119,
    120,
    117,
    118,
    115,
    116,
    113,
    114,
    111,
    112,
    109,
    110,
    107,
    108,
    105,
    106,
    103,
    104,
    101,
    102,
    99,
    100,
    97,
    98,
    128,
    127,
    95,
    96,
    93,
    94,
    91,
    92,
    89,
    90,
    87,
    88,
    85,
    86,
    83,
    84,
    81,
    82,
    79,
    80,
    77,
    78,
    75,
    76,
    73,
    74,
    71,
    72,
    69,
    70,
    67,
    68,
    65,
    66};

  const int TrapezeY[128] ={
    119, //1
    121, //2
    123, //3
    117, //4
    125, //5
    115, //6
    127, //7
    113, //8
    94, //9
    111, //10
    101, //11
    109, //12
    99, //13
    107, //14
    103, //15
    105, //16
    89, //17
    93, //18
    81, //19
    85, //20
    73, //21
    77, //22
    97, //23
    71, //24
    91, //25
    95, //26
    69, //27
    87, //28
    75, //29
    83, //30
    67, //31
    65, //32
    72, //33
    79, //34
    70, //35
    68, //36
    76, //37
    66, //38
    74, //39
    82, //40
    78, //41
    80, //42
    84, //43
    96, //44
    90, //45
    86, //46
    98, //47
    88, //48
    104, //49
    92, //50
    128, //51
    100, //52
    126, //53
    102, //54
    124, //55
    106, //56
    122, //57
    108, //58
    120, //59
    110, //60
    118, //61
    112, //62
    114, //63
    116, //64
    31, //65
    41, //66
    39, //67
    29, //68
    37, //69
    27, //70
    35, //71
    25, //72
    33, //73
    23, //74
    47, //75
    21, //76
    45, //77
    19, //78
    43, //79
    15, //80
    49, //81
    13, //82
    51, //83
    11, //84
    53, //85
    9, //86
    55, //87
    7, //88
    57, //89
    5, //90
    59, //91
    3, //92
    61, //93
    1, //94
    17, //95
    63, //96
    2, //97
    34, //98
    36, //99
    4, //100
    38, //101
    6, //102
    40, //103
    8, //104
    64, //105
    10, //106
    62, //107
    12, //108
    60, //109
    14, //110
    58, //111
    16, //112
    56, //113
    18, //114
    54, //115
    20, //116
    52, //117
    22, //118
    50, //119
    24, //120
    48, //121
    26, //122
    46, //123
    28, //124
    44, //125
    30, //126
    32, //127
    42  //128
  };

  const int SquareX[128] ={
    18, //1
    65, //2
    19, //3
    1, //4
    20, //5
    3, //6
    21, //7
    4, //8
    22, //9
    5, //10
    23, //11
    6, //12
    24, //13
    7, //14
    25, //15
    8, //16
    26, //17
    9, //18
    27, //19
    10, //20
    28, //21
    11, //22
    29, //23
    12, //24
    30, //25
    13, //26
    31, //27
    14, //28
    32, //29
    15, //30
    33, //31
    16, //32
    34, //33
    17, //34
    35, //35
    36, //36
    51, //37
    37, //38
    52, //39
    38, //40
    53, //41
    39, //42
    54, //43
    40, //44
    55, //45
    41, //46
    56, //47
    42, //48
    57, //49
    43, //50
    58, //51
    44, //52
    59, //53
    45, //54
    60, //55
    46, //56
    61, //57
    47, //58
    62, //59
    48, //60
    63, //61
    49, //62
    64, //63
    50, //64
    66, //65
    98, //66
    67, //67
    99, //68
    68, //69
    100, //70
    69, //71
    101, //72
    70, //73
    102, //74
    71, //75
    103, //76
    72, //77
    104, //78
    73, //79
    105, //80
    74, //81
    106, //82
    75, //83
    107, //84
    76, //85
    108, //86
    77, //87
    109, //88
    78, //89
    110, //90
    79, //91
    111, //92
    80, //93
    112, //94
    81, //95
    113, //96
    82, //97
    114, //98
    83, //99
    115, //100
    84, //101
    116, //102
    85, //103
    117, //104
    86, //105
    118, //106
    87, //107
    119, //108
    88, //109
    120, //110
    89, //111
    121, //112
    90, //113
    122, //114
    91, //115
    123, //116
    92, //117
    124, //118
    93, //119
    125, //120
    94, //121
    126, //122
    95, //123
    127, //124
    96, //125
    128, //126
    97, //127
    2  //128 not connected, strip 4 connected to 1 and 2
  };

  const int SquareY[128] ={
    97, //1
    128, //2
    127, //3
    96, //4
    126, //5
    95, //6
    125, //7
    94, //8
    124, //9
    93, //10
    123, //11
    92, //12
    122, //13
    91, //14
    121, //15
    90, //16
    120, //17
    89, //18
    2, //19 not connected strip 125 connected to 1 and 2
    88, //20
    119, //21
    87, //22
    118, //23
    86, //24
    117, //25
    85, //26
    116, //27
    84, //28
    115, //29
    83, //30
    82, //31
    114, //32
    81, //33
    113, //34
    112, //35
    80, //36
    111, //37
    79, //38
    110, //39
    78, //40
    109, //41
    77, //42
    108, //43
    76, //44
    107, //45
    75, //46
    106, //47
    74, //48
    105, //49
    73, //50
    104, //51
    72, //52
    103, //53
    71, //54
    102, //55
    70, //56
    101, //57
    69, //58
    100, //59
    68, //60
    99, //61
    67, //62
    66, //63
    98, //64
    65, //65
    50, //66
    49, //67
    64, //68
    48, //69
    63, //70
    47, //71
    62, //72
    46, //73
    61, //74
    45, //75
    60, //76
    44, //77
    59, //78
    43, //79
    58, //80
    42, //81
    57, //82
    41, //83
    56, //84
    40, //85
    55, //86
    39, //87
    54, //88
    38, //89
    53, //90
    37, //91
    52, //92
    36, //93
    51, //94
    35, //95
    17, //96
    34, //97
    16, //98
    15, //99
    33, //100
    14, //101
    32, //102
    13, //103
    31, //104
    12, //105
    30, //106
    11, //107
    29, //108
    10, //109
    28, //110
    9, //111
    27, //112
    8, //113
    26, //114
    7, //115
    25, //116
    6, //117
    24, //118
    5, //119
    23, //120
    4, //121
    22, //122
    3, //123
    21, //124
    1, //125
    20, //126
    19, //127
    18 //128
  };

  // internal mapping for S1
  ///////////
  // THETA //
  ///////////
  // we still want to record any data coming from unconnected mates
  // for (int i = 0; i < 64; i++) {
  //   real_channelTh[i+1] = 64 + i+1;
  // }


      const int AnnularX[128]{
      128,//1
      128,//2
      128,//3
      128,//4
      128,//5
      128,//6
      128,//7
      128,//8
      128,//9
      128,//10
      128,//11
      128,//12
      128,//13
      128,//14
      128,//15
      128,//16
      128,//17
      128,//18
      128,//19
      128,//20
      128,//21
      128,//22
      128,//23
      128,//24
      128,//25
      128,//26
      128,//27
      128,//28
      128,//29
      32,//30
      128,//31
      31,//32
      128,//33
      30,//34
      128,//35
      28,//36
      29,//37
      26,//38
      27,//39
      24,//40
      25,//41
      22,//42
      23,//43
      20,//44
      21,//45
      18,//46
      19,//47
      16,//48
      17,//49
      14,//50
      15,//51
      12,//52
      13,//53
      10,//54
      11,//55
      8,//56
      9,//57
      6,//58
      7,//59
      4,//60
      5,//61
      2,//62
      3,//63
      1,//64
      33,  // 65  
      34,  // 66  
      34,  // 67  ////// WARNING ? ERROR IN MAPPING FILE?
      128,  // 68  
      36,  // 69  
      128,  // 70  
      35,  // 71  
      128,  // 72  
      38, // 73  
      128,  // 74  
      37, // 75  
      128, // 76  
      40, // 77  
      128, // 78  
      39, // 79  
      128, // 80  
      42, // 81  
      128, // 82  
      41, // 83  
      128, // 84  
      44, // 85  
      128, // 86  
      43, // 87  
      128, // 88  
      46, // 89  
      128, // 90  
      45, // 91  
      128, // 92  
      48, // 93  
      128, // 94  
      47, // 95  
      128, // 96  
      50, // 97  
      128, // 98  
      49, // 99  
      128, // 100 
      52, // 101 
      128, // 102 
      51, // 103 
      128, // 104 
      54, // 105 
      128, // 106 
      53, // 107 
      128, // 108 
      56, // 109 
      128, // 110 
      55, // 111 
      128,// 112
      58, // 113 
      128, // 114 
      57, // 115 
      128, // 116 
      60, // 117 
      128, // 118 
      59, // 119 
      128, // 120 
      62, // 121 
      128, // 122 
      61, // 123 
      128, // 124 
      63, // 125 
      128, // 126 
      64, // 127 
      128 // 128 
      };

  ///////
  // PHI //
  ///////
  // we still want to record any data coming from unconnected mates
   //16 wedges phi
   const int AnnularY[128]={
     // only strip connected values //
     128,// 1
     128,// 2
     128,// 3
     128,// 4
     128,// 5
     128,// 6
     128,// 7
     128,// 8
     128,// 9
     128,// 10
     128,// 11
     128,// 12
     128,// 13
     10,// 14
     128,// 15
     11,// 16
     128,//17
     9,//18
     128,//19
     12,//20
     128,//21
     8,//22
     128,//23
     13,//24
     128,//25
     7,//26
     128,//27
     14,//28
     128,//29
     128,//30
     128,//31
     128,//32
     128,//33
     128,//34
     128,//35
     6,//36
     128,//37
     15,//38
     128,//39
     5,//40
     128,//41
     16,//42
     128,//43
     4,//44
     128,//45
     1,//46
     128,//47
     3,//48
     128,//49
     2,//50
     128,//51
     128,//52
     128,//53
     128,//54
     128,//55
     128,//56
     128,//57
     128,//58
     128,//59
     128,//60
     128,//61
     128,//62
     128,//63
     128,//64
     128,//65
     128,//66
     128,//67
     128,//68
     128,//69
     128,//70
     128,//71
     128,//72
     128,//73
     128,//74
     128,//75
     128,//76
     128,//77
     128,//78
     128,//79
     128,//80
     128,//81
     128,//82
     128,//83
     128,//84
     128,//85
     128,//86
     128,//87
     128,//88
     128,//89
     128,//90
     128,//91
     128,//92
     128,//93
     128,//94
     128,//95
     128,//96
     128,//97
     128,//98
     128,//99
     128,//100
     128,//101
     128,//102
     128,//103
     128,//104
     128,//105
     128,//106
     128,//107
     128,//108
     128,//109
     128,//110
     128,//111
     128,//112
     128,//113
     128,//114
     128,//115
     128,//116
     128,//117
     128,//118
     128,//119
     128,//120
     128,//121
     128,//122
     128,//123
     128,//124
     128,//125
     128,//126
     128,//127
     128 //128
   };
   
}  
#endif
   
